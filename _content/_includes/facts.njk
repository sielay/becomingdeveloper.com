{% extends 'intro.njk' %}

{% block introtitle %}
Book facts
{% endblock %}

{% block introbody %}

<div class="list">

 * Paperback: 6' x 9', about 280 pages.
 * Ebook: about 280 pages. 

</div>

## Table of Contents

<div class="list">

 * PREFACE
 * INTRODUCTION
     * Who this book is for?
     * How to read this book?
     * About the author
   * PART 1 - DESTINATION
     * Why people learn to code?
     * Professions in the IT
      * Software Developers
      * Software Engineers
      * Quality Assurance and SDET
      * UI and UX
      * Project, Product and Account Management
      * Applications Administration
      * Application Support and Monitoring
      * Hardware and Networks Maintenance
      * DevOps and Systems
      * Security and Audits
      * Search Engine Optimisation, Social and Traffic
      * Data Analytics
      * Ads, Sales, Commercial and E-Commerce
      * Hardware Engineering
      * Other jobs in IT
    * Classifications of Software Developers
      * Experience and responsibility
      * Technology
      * Environment
      * The past and the future
    * Who a software developer is not?
    * How becoming a developer may secure your future?
      * Market before the pandemics
      * Remote work and remuneration before pandemics
      * Work in IT during the pandemic
      * Contracting and freelancing
    * How becoming a developer may help you in other trades?
      * Automating and documenting processes
      * Analytical thinking and problem solving
      * Improving communications
    * What is beyond?
 * PART 2 - MY STORY
    * Early beginnings
    * We are worth more than you think
    * Every time you learn from the beginning
    * Taking on responsibility
    * Keep reinventing yourself
    * Join me on the journey
 * PART 3 - THE PATH
    * What does it take?
      * Myth about memorising
      * Myth about working hard
      * Need of a context
      * Equipment
      * Time and money
    * Who can help you?
      * Pay to win. Is it worth it?
      * Charities and the community
      * Mentors
    * What makes you a good hire?
      * Where to apply first
      * Demand
      * Forms of engagement
      * MVH and ROI
      * Accountability
      * Skill set, experience and presence
      * Counter argument: Personal brand
      * Mandatory, but irrelevant
      * Preparing for the interview
    * What are typical career paths?
      * A “regular” developer and senior developer
      * Lead, Principal, and Head of
    * What lays ahead?
      * How do you stay relevant?
      * What barriers you may find?
 * PART 4 – THE WORK
    * Minimum technical background
      * Code fundamentals
      * Changes
      * Systems and their layers
      * Security
      * Real system examples
    * Organising the work
      * Waterfall
      * Agile
      * Developers Anarchy
    * Requirements
      * Proactive tasks
      * Reactive tasks
      * Horror stories
    * How does the work actually look like?
      * Day of a software developer
      * Week/2 Weeks of a software developer
      * Year of a software developer
 * PART 5 – THE ENVIRONMENT
    * What to expect
      * From the company
      * From the manager
      * From your colleagues
      * From the market
    * What challenges will you face?
      * Lack of understanding
      * Imposter syndrome
      * Burnout and tiredness
      * No silver bullet solutions
      * Making vs Doing
 * THE FINAL WORD

</div>

{% endblock %}